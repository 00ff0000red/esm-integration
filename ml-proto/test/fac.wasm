;; (c) 2015 Andreas Rossberg

(module
  ;; Recursive factorial
  (func (param i64) (result i64)
    (if (eq.i64 (getparam 0) (const.i64 0))
      (const.i64 1)
      (mul.i64 (getparam 0) (call 0 (sub.i64 (getparam 0) (const.i64 1))))
    )
  )

  ;; Recursive factorial named
  (func fac-rec (param n i64) (result i64)
    (if (eq.i64 (getparam n) (const.i64 0))
      (const.i64 1)
      (mul.i64 (getparam n) (call fac-rec (sub.i64 (getparam n) (const.i64 1))))
    )
  )

  ;; Iterative factorial
  (func (param i64) (result i64)
    (local i64 i64)
    (setlocal 0 (getparam 0))
    (setlocal 1 (const.i64 1))
    (label
      (loop
        (if
          (eq.i64 (getlocal 0) (const.i64 0))
          (break 0)
          (block
            (setlocal 1 (mul.i64 (getlocal 0) (getlocal 1)))
            (setlocal 0 (sub.i64 (getlocal 0) (const.i64 1)))
          )
        )
      )
    )
    (return (getlocal 1))
  )

  ;; Iterative factorial named
  (func fac-iter (param n i64) (result i64)
    (local i i64)
    (local res i64)
    (setlocal i (getparam n))
    (setlocal res (const.i64 1))
    (label done
      (loop
        (if
          (eq.i64 (getlocal i) (const.i64 0))
          (break done)
          (block
            (setlocal res (mul.i64 (getlocal i) (getlocal res)))
            (setlocal i (sub.i64 (getlocal i) (const.i64 1)))
          )
        )
      )
    )
    (return (getlocal res))
  )

  (export "fac-rec" 0)
  (export "fac-iter" 2)
  (export "fac-rec-named" fac-rec)
  (export "fac-iter-named" fac-iter)
)

(invoke "fac-rec" (const.i64 25))  ;; 7034535277573963776 : i64
(invoke "fac-iter" (const.i64 25))  ;; 7034535277573963776 : i64
(invoke "fac-rec-named" (const.i64 25))  ;; 7034535277573963776 : i64
(invoke "fac-iter-named" (const.i64 25))  ;; 7034535277573963776 : i64
