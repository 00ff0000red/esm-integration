;; (c) 2015 Andreas Rossberg

;; Test memory section structure
(module (memory 0 0))
(module (memory 0 1))
(module (memory 4096 16777216))
(module (memory 0 0 (segment 0 "")))
(module (memory 1 1 (segment 0 "a")))
(module (memory 100 1000 (segment 0 "a") (segment 99 "b")))
(module (memory 100 1000 (segment 0 "a") (segment 1 "b") (segment 2 "c")))
(assertinvalid
  (module (memory 1 0))
  "initial memory size must be less than maximum")
(assertinvalid
  (module (memory 0 0 (segment 0 "a")))
  "data segment does not fit memory")
(assertinvalid
  (module (memory 100 1000 (segment 0 "a") (segment 500 "b")))
  "data segment does not fit memory")
(assertinvalid
  (module (memory 100 1000 (segment 0 "abc") (segment 0 "def")))
  "data segment not disjoint and ordered")
(assertinvalid
  (module (memory 100 1000 (segment 3 "ab") (segment 0 "de")))
  "data segment not disjoint and ordered")
(assertinvalid
  (module (memory 100 1000 (segment 0 "a") (segment 2 "b") (segment 1 "c")))
  "data segment not disjoint and ordered")

;; Test alignment annotation rules
(module (func (loadu.2.i8 (const.i32 0))))
(module (func (loadu.4.i16 (const.i32 0))))
(module (func (loadu.8.i32 (const.i32 0))))
(module (func (load.8.f32 (const.i32 0))))
(assertinvalid (module (func (loadu.0.i64 (const.i32 0)))) "non-power-of-two alignment")
(assertinvalid (module (func (loadu.3.i64 (const.i32 0)))) "non-power-of-two alignment")
(assertinvalid (module (func (loadu.5.i64 (const.i32 0)))) "non-power-of-two alignment")
(assertinvalid (module (func (loadu.6.i64 (const.i32 0)))) "non-power-of-two alignment")
(assertinvalid (module (func (loadu.7.i64 (const.i32 0)))) "non-power-of-two alignment")

(module
  (memory 1024 (segment 0 "ABC\a7D") (segment 20 "WASM"))

  ;; Data section
  (func $data (result i32)
    (and.i32
      (and.i32
        (eq.i32 (loadu.i8 (const.i32 0)) (const.i32 65))
        (eq.i32 (loadu.i8 (const.i32 3)) (const.i32 167))
      )
      (and.i32
        (eq.i32 (loadu.i8 (const.i32 20)) (const.i32 87))
        (eq.i32 (loadu.i8 (const.i32 23)) (const.i32 77))
      )
    )
  )

  ;; Aligned read/write
  (func $aligned (result i32)
    (local i32 i32 i32)
    (setlocal 0 (const.i32 10))
    (label
      (loop
        (if
          (eq.i32 (getlocal 0) (const.i32 0))
          (break)
        )
        (setlocal 2 (mul.i32 (getlocal 0) (const.i32 4)))
        (stores.i32 (getlocal 2) (getlocal 0))
        (setlocal 1 (loads.i32 (getlocal 2)))
        (if
          (neq.i32 (getlocal 0) (getlocal 1))
          (return (const.i32 0))
        )
        (setlocal 0 (sub.i32 (getlocal 0) (const.i32 1)))
      )
    )
    (return (const.i32 1))
  )

  ;; Unaligned read/write
  (func $unaligned (result i32)
    (local i32 f64 f64)
    (setlocal 0 (const.i32 10))
    (label
      (loop
        (if
          (eq.i32 (getlocal 0) (const.i32 0))
          (break)
        )
        (setlocal 2 (converts.i32.f64 (getlocal 0)))
        (store.1.f64 (getlocal 0) (getlocal 2))
        (setlocal 1 (load.1.f64 (getlocal 0)))
        (if
          (neq.f64 (getlocal 2) (getlocal 1))
          (return (const.i32 0))
        )
        (setlocal 0 (sub.i32 (getlocal 0) (const.i32 1)))
      )
    )
    (return (const.i32 1))
  )

  ;; Memory cast
  (func $cast (result f64)
    (stores.i64 (const.i32 8) (const.i64 -12345))
    (if
      (eq.f64
        (load.f64 (const.i32 8))
        (reinterpret.i64.f64 (const.i64 -12345))
      )
      (return (const.f64 0))
    )
    (stores.1.i64 (const.i32 9) (const.i64 0))
    (stores.1.i16 (const.i32 15) (const.i32 16453))
    (return (load.1.f64 (const.i32 9)))
  )

  (export "data" $data)
  (export "aligned" $aligned)
  (export "unaligned" $unaligned)
  (export "cast" $cast)
)

(asserteq (invoke "data") (const.i32 1))
(asserteq (invoke "aligned") (const.i32 1))
(asserteq (invoke "unaligned") (const.i32 1))
(asserteq (invoke "cast") (const.f64 42.0))
