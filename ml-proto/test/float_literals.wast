;; Test floating-point literal parsing.

(module
  ;; f32 special values
  (export "f32.nan" (func (result i32) (i32.reinterpret/f32 (f32.const nan))))
  (export "f32.positive_nan" (func (result i32) (i32.reinterpret/f32 (f32.const +nan))))
  (export "f32.negative_nan" (func (result i32) (i32.reinterpret/f32 (f32.const -nan))))
  (export "f32.plain_nan" (func (result i32) (i32.reinterpret/f32 (f32.const nan:0x400000))))
  (export "f32.informally_known_as_plain_snan" (func (result i32) (i32.reinterpret/f32 (f32.const nan:0x200000))))
  (export "f32.all_ones_nan" (func (result i32) (i32.reinterpret/f32 (f32.const -nan:0x7fffff))))
  (export "f32.misc_nan" (func (result i32) (i32.reinterpret/f32 (f32.const nan:0x012345))))
  (export "f32.misc_positive_nan" (func (result i32) (i32.reinterpret/f32 (f32.const +nan:0x304050))))
  (export "f32.misc_negative_nan" (func (result i32) (i32.reinterpret/f32 (f32.const -nan:0x2abcde))))
  (export "f32.infinity" (func (result i32) (i32.reinterpret/f32 (f32.const infinity))))
  (export "f32.positive_infinity" (func (result i32) (i32.reinterpret/f32 (f32.const +infinity))))
  (export "f32.negative_infinity" (func (result i32) (i32.reinterpret/f32 (f32.const -infinity))))

  ;; f32 numbers
  (export "f32.zero" (func (result i32) (i32.reinterpret/f32 (f32.const 0x0.0p0))))
  (export "f32.positive_zero" (func (result i32) (i32.reinterpret/f32 (f32.const +0x0.0p0))))
  (export "f32.negative_zero" (func (result i32) (i32.reinterpret/f32 (f32.const -0x0.0p0))))
  (export "f32.misc" (func (result i32) (i32.reinterpret/f32 (f32.const 0x1.921fb6p+2))))
  (export "f32.min_positive" (func (result i32) (i32.reinterpret/f32 (f32.const 0x1p-149))))
  (export "f32.min_normal" (func (result i32) (i32.reinterpret/f32 (f32.const 0x1p-126))))
  (export "f32.max_finite" (func (result i32) (i32.reinterpret/f32 (f32.const 0x1.fffffep+127))))
  (export "f32.max_subnormal" (func (result i32) (i32.reinterpret/f32 (f32.const 0x1.fffffcp-127))))
  (export "f32.trailing_dot" (func (result i32) (i32.reinterpret/f32 (f32.const 0x1.p10))))

  ;; f32 in decimal format
  (export "f32_dec.zero" (func (result i32) (i32.reinterpret/f32 (f32.const 0.0e0))))
  (export "f32_dec.positive_zero" (func (result i32) (i32.reinterpret/f32 (f32.const +0.0e0))))
  (export "f32_dec.negative_zero" (func (result i32) (i32.reinterpret/f32 (f32.const -0.0e0))))
  (export "f32_dec.misc" (func (result i32) (i32.reinterpret/f32 (f32.const 6.28318548202514648))))
  (export "f32_dec.min_positive" (func (result i32) (i32.reinterpret/f32 (f32.const 1.4013e-45))))
  (export "f32_dec.min_normal" (func (result i32) (i32.reinterpret/f32 (f32.const 1.1754944e-38))))
  (export "f32_dec.max_subnormal" (func (result i32) (i32.reinterpret/f32 (f32.const 1.1754942e-38))))
  (export "f32_dec.max_finite" (func (result i32) (i32.reinterpret/f32 (f32.const 3.4028234e+38))))
  (export "f32_dec.trailing_dot" (func (result i32) (i32.reinterpret/f32 (f32.const 1.e10))))

  ;; f64 special values
  (export "f64.nan" (func (result i64) (i64.reinterpret/f64 (f64.const nan))))
  (export "f64.positive_nan" (func (result i64) (i64.reinterpret/f64 (f64.const +nan))))
  (export "f64.negative_nan" (func (result i64) (i64.reinterpret/f64 (f64.const -nan))))
  (export "f64.plain_nan" (func (result i64) (i64.reinterpret/f64 (f64.const nan:0x8000000000000))))
  (export "f64.informally_known_as_plain_snan" (func (result i64) (i64.reinterpret/f64 (f64.const nan:0x4000000000000))))
  (export "f64.all_ones_nan" (func (result i64) (i64.reinterpret/f64 (f64.const -nan:0xfffffffffffff))))
  (export "f64.misc_nan" (func (result i64) (i64.reinterpret/f64 (f64.const nan:0x0123456789abc))))
  (export "f64.misc_positive_nan" (func (result i64) (i64.reinterpret/f64 (f64.const +nan:0x3040506070809))))
  (export "f64.misc_negative_nan" (func (result i64) (i64.reinterpret/f64 (f64.const -nan:0x2abcdef012345))))
  (export "f64.infinity" (func (result i64) (i64.reinterpret/f64 (f64.const infinity))))
  (export "f64.positive_infinity" (func (result i64) (i64.reinterpret/f64 (f64.const +infinity))))
  (export "f64.negative_infinity" (func (result i64) (i64.reinterpret/f64 (f64.const -infinity))))

  ;; f64 numbers
  (export "f64.zero" (func (result i64) (i64.reinterpret/f64 (f64.const 0x0.0p0))))
  (export "f64.positive_zero" (func (result i64) (i64.reinterpret/f64 (f64.const +0x0.0p0))))
  (export "f64.negative_zero" (func (result i64) (i64.reinterpret/f64 (f64.const -0x0.0p0))))
  (export "f64.misc" (func (result i64) (i64.reinterpret/f64 (f64.const 0x1.921fb54442d18p+2))))
  (export "f64.min_positive" (func (result i64) (i64.reinterpret/f64 (f64.const 0x0.0000000000001p-1022))))
  (export "f64.min_normal" (func (result i64) (i64.reinterpret/f64 (f64.const 0x1p-1022))))
  (export "f64.max_subnormal" (func (result i64) (i64.reinterpret/f64 (f64.const 0x0.fffffffffffffp-1022))))
  (export "f64.max_finite" (func (result i64) (i64.reinterpret/f64 (f64.const 0x1.fffffffffffffp+1023))))
  (export "f64.trailing_dot" (func (result i64) (i64.reinterpret/f64 (f64.const 0x1.p100))))

  ;; f64 numbers in decimal format
  (export "f64_dec.zero" (func (result i64) (i64.reinterpret/f64 (f64.const 0.0e0))))
  (export "f64_dec.positive_zero" (func (result i64) (i64.reinterpret/f64 (f64.const +0.0e0))))
  (export "f64_dec.negative_zero" (func (result i64) (i64.reinterpret/f64 (f64.const -0.0e0))))
  (export "f64_dec.misc" (func (result i64) (i64.reinterpret/f64 (f64.const 6.28318530717958623))))
  (export "f64_dec.min_positive" (func (result i64) (i64.reinterpret/f64 (f64.const 4.94066e-324))))
  (export "f64_dec.min_normal" (func (result i64) (i64.reinterpret/f64 (f64.const 2.2250738585072012e-308))))
  (export "f64_dec.max_subnormal" (func (result i64) (i64.reinterpret/f64 (f64.const 2.2250738585072011e-308))))
  (export "f64_dec.max_finite" (func (result i64) (i64.reinterpret/f64 (f64.const 1.7976931348623157e+308))))
  (export "f64_dec.trailing_dot" (func (result i64) (i64.reinterpret/f64 (f64.const 1.e100))))
)

(assert_return (invoke "f32.nan") (i32.const 0x7fc00000))
(assert_return (invoke "f32.positive_nan") (i32.const 0x7fc00000))
(assert_return (invoke "f32.negative_nan") (i32.const 0xffc00000))
(assert_return (invoke "f32.plain_nan") (i32.const 0x7fc00000))
(assert_return (invoke "f32.informally_known_as_plain_snan") (i32.const 0x7fa00000))
(assert_return (invoke "f32.all_ones_nan") (i32.const 0xffffffff))
(assert_return (invoke "f32.misc_nan") (i32.const 0x7f812345))
(assert_return (invoke "f32.misc_positive_nan") (i32.const 0x7fb04050))
(assert_return (invoke "f32.misc_negative_nan") (i32.const 0xffaabcde))
(assert_return (invoke "f32.infinity") (i32.const 0x7f800000))
(assert_return (invoke "f32.positive_infinity") (i32.const 0x7f800000))
(assert_return (invoke "f32.negative_infinity") (i32.const 0xff800000))
(assert_return (invoke "f32.zero") (i32.const 0))
(assert_return (invoke "f32.positive_zero") (i32.const 0))
(assert_return (invoke "f32.negative_zero") (i32.const 0x80000000))
(assert_return (invoke "f32.misc") (i32.const 0x40c90fdb))
(assert_return (invoke "f32.min_positive") (i32.const 1))
(assert_return (invoke "f32.min_normal") (i32.const 0x800000))
(assert_return (invoke "f32.max_subnormal") (i32.const 0x7fffff))
(assert_return (invoke "f32.max_finite") (i32.const 0x7f7fffff))
(assert_return (invoke "f32.trailing_dot") (i32.const 0x44800000))
(assert_return (invoke "f32_dec.zero") (i32.const 0))
(assert_return (invoke "f32_dec.positive_zero") (i32.const 0))
(assert_return (invoke "f32_dec.negative_zero") (i32.const 0x80000000))
(assert_return (invoke "f32_dec.misc") (i32.const 0x40c90fdb))
(assert_return (invoke "f32_dec.min_positive") (i32.const 1))
(assert_return (invoke "f32_dec.min_normal") (i32.const 0x800000))
(assert_return (invoke "f32_dec.max_subnormal") (i32.const 0x7fffff))
(assert_return (invoke "f32_dec.max_finite") (i32.const 0x7f7fffff))
(assert_return (invoke "f32_dec.trailing_dot") (i32.const 0x501502f9))

(assert_return (invoke "f64.nan") (i64.const 0x7ff8000000000000))
(assert_return (invoke "f64.positive_nan") (i64.const 0x7ff8000000000000))
(assert_return (invoke "f64.negative_nan") (i64.const 0xfff8000000000000))
(assert_return (invoke "f64.plain_nan") (i64.const 0x7ff8000000000000))
(assert_return (invoke "f64.informally_known_as_plain_snan") (i64.const 0x7ff4000000000000))
(assert_return (invoke "f64.all_ones_nan") (i64.const 0xffffffffffffffff))
(assert_return (invoke "f64.misc_nan") (i64.const 0x7ff0123456789abc))
(assert_return (invoke "f64.misc_positive_nan") (i64.const 0x7ff3040506070809))
(assert_return (invoke "f64.misc_negative_nan") (i64.const 0xfff2abcdef012345))
(assert_return (invoke "f64.infinity") (i64.const 0x7ff0000000000000))
(assert_return (invoke "f64.positive_infinity") (i64.const 0x7ff0000000000000))
(assert_return (invoke "f64.negative_infinity") (i64.const 0xfff0000000000000))
(assert_return (invoke "f64.zero") (i64.const 0))
(assert_return (invoke "f64.positive_zero") (i64.const 0))
(assert_return (invoke "f64.negative_zero") (i64.const 0x8000000000000000))
(assert_return (invoke "f64.misc") (i64.const 0x401921fb54442d18))
(assert_return (invoke "f64.min_positive") (i64.const 1))
(assert_return (invoke "f64.min_normal") (i64.const 0x10000000000000))
(assert_return (invoke "f64.max_subnormal") (i64.const 0xfffffffffffff))
(assert_return (invoke "f64.max_finite") (i64.const 0x7fefffffffffffff))
(assert_return (invoke "f64.trailing_dot") (i64.const 0x4630000000000000))
(assert_return (invoke "f64_dec.zero") (i64.const 0))
(assert_return (invoke "f64_dec.positive_zero") (i64.const 0))
(assert_return (invoke "f64_dec.negative_zero") (i64.const 0x8000000000000000))
(assert_return (invoke "f64_dec.misc") (i64.const 0x401921fb54442d18))
(assert_return (invoke "f64_dec.min_positive") (i64.const 1))
(assert_return (invoke "f64_dec.min_normal") (i64.const 0x10000000000000))
(assert_return (invoke "f64_dec.max_subnormal") (i64.const 0xfffffffffffff))
(assert_return (invoke "f64_dec.max_finite") (i64.const 0x7fefffffffffffff))
(assert_return (invoke "f64_dec.trailing_dot") (i64.const 0x54b249ad2594c37d))
